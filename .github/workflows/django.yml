name: Django CICD

on:
  push:
    paths:
    - "alteredbuilder/**"
    - ".github/workflows/*.yml"

env:
  DEBUG: False
  USE_GCS_STATICS: False

defaults:
  run:
    working-directory: ./alteredbuilder

jobs:
  changes:
    runs-on: ubuntu-22.04
    outputs:
      statics: ${{ steps.filter.outputs.statics }}
      migrations: ${{ steps.filter.outputs.migrations }}
    steps:
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v3
      id: filter
      with:
        filters: |
          statics:
          - "**/static/**"
          - "**/statics/**"
          migrations:
          - "**/migrations/**"

  unittests:
    runs-on: ubuntu-22.04
    services:
      db:
        image: postgres:15.4
        ports:
        - 5432:5432
        env:
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: 3.12
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Run Tests
      run: python manage.py test
      env:
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}

  build_and_push_image:
    needs: unittests
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
    - id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_GITHUB_SA }}
    - uses: google-github-actions/setup-gcloud@v2
    - run: gcloud auth configure-docker ${{ vars.REGION }}-docker.pkg.dev --quiet
    - run: docker build . --tag ${{ vars.AR_REPOSITORY }}/${{ vars.CLOUD_RUN_SERVICE_NAME }}
    - run: docker push ${{ vars.AR_REPOSITORY }}/${{ vars.CLOUD_RUN_SERVICE_NAME }}

  migrate_db:
    needs: [changes, build_and_push_image]
    if: needs.changes.outputs.migrations == 'true'
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: 3.12
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Google Cloud SQL Auth Proxy
      uses: mattes/gce-cloudsql-proxy-action@v1
      with:
        creds: ${{ secrets.GCP_GITHUB_SA }}
        instance: ${{ vars.CLOUD_SQL_INSTANCE }}
        port: 5432
    - name: Run migrations
      run: python manage.py migrate
      env:
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        DATABASE_URL: ${{ secrets.MIGRATION_DATABASE_URL }}

  collect_statics:
    needs: [changes, unittests]
    if: needs.changes.outputs.statics == 'true'
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: 3.12
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Collect static files to GCS
      run: python manage.py collectstatic --no-input
      env:
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        DATABASE_URL: ${{ secrets.MIGRATION_DATABASE_URL }}
        USE_GCS_STATICS: True
        GCS_BUCKET_STATICS: ${{ vars.GCS_BUCKET_STATICS }}
        GCP_GITHUB_SA: ${{ secrets.GCP_GITHUB_SA }}

  deploy:
    needs: [build_and_push_image, migrate_db, collect_statics]
    if: |
      always() &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled')
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
    - id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_GITHUB_SA }}
    - id: vars
      run: echo "sha_short=$(git rev-parse --short ${{ github.sha }})" >> $GITHUB_OUTPUT
    - uses: google-github-actions/deploy-cloudrun@v2
      with:
        project_id: ${{ vars.GCP_PROJECT }}
        region: ${{ vars.REGION }}
        service: ${{ vars.CLOUD_RUN_SERVICE_NAME }}
        image: ${{ vars.AR_REPOSITORY }}/${{ vars.CLOUD_RUN_SERVICE_NAME }}
        env_vars: |-
          COMMIT_ID=${{ steps.vars.outputs.sha_short }}
        env_vars_update_strategy: merge
        flags: |
          --platform=managed
          --port=8000
          --add-cloudsql-instances=${{ vars.CLOUD_SQL_INSTANCE }}
          --allow-unauthenticated
          --service-account=${{ vars.CLOUD_RUN_SA_NAME }}
          --cpu=1000m
          --memory=256Mi